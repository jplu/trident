name: Github CI

on:
  push:
    branches:
    - "main"
  pull_request:
    branches:
    - "main"

jobs:
  build:
    strategy:
      # Run the job on all combinations of the specified OS and Go versions.
      # We use fail-fast: false so that a failure on one combination does not cancel the others.
      fail-fast: false
      matrix:
        go-version: [ '1.24.x', '1.25.x' ]
        os: [ ubuntu-latest, macos-latest ]

    # The runner environment is dynamically set based on the matrix.os value.
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout code
        uses: actions/checkout@v5

      # Step 2: Set up the specified Go version
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      # Step 3: Cache Go modules to speed up future builds
      # The key is OS-specific to prevent cache conflicts between runners.
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: go mod download

      # Step 5: Run linters
      # This step only needs to run on one OS to avoid redundant checks.
      # We'll run it on the latest Go version on Ubuntu.
      - name: Run linter
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25.x'
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.6
          args: --timeout=3m ./...

      # Step 6: Run tests for all packages on all OS and Go versions
      - name: Run tests with coverage
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      # Step 7: Upload code coverage report to Codecov
      # We only upload from one job to prevent conflicts and redundant reports.
      # Here, we choose the job running on Ubuntu with the latest Go version.
      - name: Upload coverage to Codecov
        if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25.x'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt
          flags: unittests
          fail_ci_if_error: true
          verbose: true

      # Step 8: Build all packages to ensure they compile on each OS
      - name: Build all packages
        run: go build -v ./...
